-- OBFUSCATOR 
--Copyright rnd, 2017
-------------------------------------------------------------------------
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
------------------------------------------------------------------------


-- INSTRUCTIONS
-- modify last lines inside mod lua file for your own a_in.lua (bad unreadable code) and a_out.lua file (crystal clarity code (tm))

-- 0. use local variables all the time in your code, only use globals if absolutely necessary. All the local variables are affected by "clarity".
-- 1.follow this guideline with the structs a = {...} : 
-- a = {b=c,d=e, function(f)  g ... } will work, so simple variables first, nested pure functions later is ok. 
-- If you do function first it will assume you exited struct so stuff like b=c afterwards will get replaced too with v___ = v____ This will then cause execution errors!
-- 2. dont use same variable name for variable thats local and global
 
 local v__________________________ = function(v_____) local v________________ = {}; local v____________________________________; for v_____________ in string.gmatch(v_____,"[^\n]+") do local v____________________ = string.find(v_____________,"%-%-") or (string.len(v_____________)+1); v________________[#v________________+1]= string.sub(v_____________,1,v____________________-1) end return table.concat(v________________,"\n"); end local v________ = function(v____________________________________) return string.gsub(v____________________________________,"\n"," "); end local v_______ =function(v_____) local v________________ = {}; local v___ = string.len(v_____); local v____________________=1; local v______________ = 0; while v____________________<= v___ do local v_______________________ = string.sub(v_____,v____________________,v____________________) if v_______________________ == "\"" then local v_______________ = string.sub(v_____,v____________________-1,v____________________-1); if v_______________ ~= "\\" or (v_______________ == "\\" and string.sub(v_____,v____________________-2,v____________________-2) == "\\") then v____________ = not v____________ end end if v_______________________ == "'" then if not v____________ then v_______________________ = "\"" end end v________________[#v________________+1]=v_______________________ v____________________=v____________________+1; end return table.concat(v________________,"") end local v___________________________ = function(v_____) local v________________ = {}; local v___ = string.len(v_____); local v____________________=1; local v______________ = 0; while v____________________<= v___ do local v_______________________ = string.sub(v_____,v____________________,v____________________) if v_______________________ == "\"" then local v_______________ = string.sub(v_____,v____________________-1,v____________________-1); if v_______________ ~= "\\" or (v_______________ == "\\" and string.sub(v_____,v____________________-2,v____________________-2) == "\\") then v____________ = not v____________ end end if not v____________ then if v_______________________ == " " then v______________ = v______________+1 end end if v______________>0 and v_______________________~=" " then v______________ = 0 end if v______________<2 and string.byte(v_______________________)~=9 then v________________[#v________________+1]=v_______________________ end v____________________=v____________________+1; end return table.concat(v________________,"") end local v_________ = {["+"]=1,["*"]=1,["/"]=1,["="]=1,[" "]=1} local v____________________________ = { ["for"]=1,["if"]=1, ["do"]=1, ["while"]=1, ["until"]=1, ["function"]=1,["in"]=1,["end"]=1, ["local"]=1, ["return"]=1, ["break"]=1, ["else"]=1, ["elseif"]=1, ["true"]=1, ["false"]=1, ["nil"]=1, ["not"]=1, ["or"]=1, ["repeat"]=1,["then"]=1, } local v____ = function(v_____)  local v_____________________ = {}; local v_____________; for v_____________ in string.gmatch(v_____,"[%w_]+") do if v_____________ and not v____________________________[v_____________] then local v_______________________ = string.byte(v_____________,1); if not(v_______________________>47 and v_______________________ < 58) then v_____________________[v_____________] = true; end end end local v_________________________ = {}; for v______________________,v in pairs(v_____________________) do v_________________________[#v_________________________+1]=v______________________ end return v_________________________ end local v_________________ = function(v_______________________) if not v_______________________ then v_______________________ = 0 end return (v_______________________>=48 and v_______________________<=57) or (v_______________________>=65 and v_______________________<=90) or v_______________________==95 or (v_______________________>=97 and v_______________________<=122) end local v__ = function(v_____, v_________________________) local v_ = {}; local v___ = string.len(v_____); for v________________________ = 1,#v_________________________ do local v______ = v_________________________[v________________________]; local v_____________________________ = string.len(v______) local v____________ = false; local v______________________________ = -1; local v____________________ = 1; local v________________________________ = false; while v____________________<= v___ do local v_______________________ = string.sub(v_____,v____________________,v____________________) if v_______________________ == "\"" then local v_______________ = string.sub(v_____,v____________________-1,v____________________-1); if v_______________ ~= "\\" or (v_______________ == "\\" and string.sub(v_____,v____________________-2,v____________________-2) == "\\") then v____________ = not v____________ end end if not v____________ and string.sub(v_____,v____________________,v____________________+v_____________________________-1) == v______ then local v_______________ = string.byte(v_____,v____________________-1) or 0; local v__________________ = string.byte(v_____,v____________________+v_____________________________) or 0; if not v_________________(v_______________) and not v_________________(v__________________) and v_______________ ~= 46 then if string.sub(v_____,v____________________-6,v____________________-1)== "local " then v________________________________ = true end end end v____________________=v____________________+1 end if not v________________________________ then v_[v________________________] = true end end return v_ end local v_______________________________ = function(v_____,v_________________________) local v___ = string.len(v_____); local v_________________________________ = {}; for v________________________ = 1,#v_________________________ do local v______ = v_________________________[v________________________]; local v_____________________________ = string.len(v______) local v____________ = false; local v___________________ = false; local v____________________ = 1; while v____________________<= v___ do local v_______________________ = string.sub(v_____,v____________________,v____________________) if v_______________________ == "\"" then local v_______________ = string.sub(v_____,v____________________-1,v____________________-1); if v_______________ ~= "\\" or (v_______________ == "\\" and string.sub(v_____,v____________________-2,v____________________-2) == "\\") then v____________ = not v____________ end end if not v____________ then if v_______________________ == "{" then v___________________ = true elseif v_______________________ == "}" then v___________________ = false end end if v___________________ then if string.sub(v_____,v____________________,v____________________+7) == "function" then v___________________ = false end end if not v____________ and string.sub(v_____,v____________________,v____________________+v_____________________________-1) == v______ then local v_______________ = string.byte(v_____,v____________________-1) or 0; local v__________________ = string.byte(v_____,v____________________+v_____________________________) or 0; if not v_________________(v_______________) and not v_________________(v__________________) and v_______________ ~= 46 then if v___________________ then local v___________ = string.sub(v_____,v____________________+v_____________________________,v____________________+v_____________________________+2); if not string.find(v___________,"=") then v_________________________________[#v_________________________________+1] = {v____________________,v________________________} end else v_________________________________[#v_________________________________+1] = {v____________________,v________________________} end end end v____________________=v____________________+1 end end local v__________________________________ = function(a,b) if a[1]<b[1] then return true else return false end end table.sort(v_________________________________,v__________________________________); local v________________ = {}; local v____________________=1; for v______________________ = 1,#v_________________________________ do v________________[#v________________+1] = string.sub(v_____,v____________________,v_________________________________[v______________________][1]-1) local v________________________ = v_________________________________[v______________________][2] local v______ = v_________________________[v________________________]; v________________[#v________________+1] = "v"..string.rep("_",v________________________); v____________________=v_________________________________[v______________________][1]+string.len(v______) end local v______________________ = #v_________________________________; if v______________________>0 then local v________________________ = v_________________________________[v______________________][2] local v______ = v_________________________[v________________________]; v____________________=v_________________________________[v______________________][1]+string.len(v______) v________________[#v________________+1]= string.sub(v_____,v____________________) else return v_____ end return table.concat(v________________,"") end local v___________________________________ = function(v____________________________________) local v_____ = string.gsub(v____________________________________,"\r\n?","\n") v_____ = v__________________________(v_____); v_____ = v________(v_____); v_____ = v___________________________(v_____); v_____ = v_______(v_____); local v_________________________ = v____(v_____); local v_ = v__(v_____,v_________________________); local v__________ = {}; for v____________________ = 1,#v_________________________ do if not v_[v____________________] then v__________[#v__________+1] = v_________________________[v____________________] end end v_____ = v_______________________________(v_____,v__________) return v_____ end 
 
 -------------------------------------------------------------------------
 -- change to directory/filename of your choice
 
 f = assert(io.open("c:\\in.lua", "rb")) 
 code = f:read("*all") f:close(); 
 
 f = assert(io.open("c:\\out.lua", "w")) 
 f:write(v___________________________________(code)); 
 f:close();